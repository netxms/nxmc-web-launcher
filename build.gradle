plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.8.0'
    id 'distribution'
}

group 'org.netxms'

repositories {
    mavenCentral()
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

def slf4jVersion = '2.0.6'
def junitVersion = '5.9.2'
def jettyVersion = '10.0.13' // DO NOT UPGRADE to v11, 10.x is the latest which supports pre-servlet5
def hopliteVersion = '2.7.0'

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.7.10'
    implementation('org.jetbrains.kotlinx:kotlinx-cli-jvm:0.3.5')

    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "org.slf4j:slf4j-simple:${slf4jVersion}"

    //noinspection GradlePackageUpdate
    implementation "org.eclipse.jetty:jetty-server:${jettyVersion}"
    //noinspection GradlePackageUpdate
    implementation "org.eclipse.jetty:jetty-servlet:${jettyVersion}"
    //noinspection GradlePackageUpdate
    implementation "org.eclipse.jetty:jetty-webapp:${jettyVersion}"

    implementation "com.sksamuel.hoplite:hoplite-core:${hopliteVersion}"
    implementation "com.sksamuel.hoplite:hoplite-toml:${hopliteVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

test {
    useJUnitPlatform()
}

jar {
    archiveFileName = "launcher.jar"
    manifest {
        attributes "Main-Class": "org.netxms.web.LauncherKt"
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    if (file("nxmc.war").exists()) {
        from(zipTree("nxmc.war")) {
            into('/META-INF/webapps/nxmc')
        }
    }
    if (file("api.war").exists()) {
        from(zipTree("api.war")) {
            into('/META-INF/webapps/nxmc')
        }
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

distributions {
    solaris {
        contents {
            from jar
        }
    }

    macosx_aarch64 {
        contents {
            from jar
        }
    }

    aix {
        contents {
            from jar
        }
    }
}

tasks.withType(Tar) {
    compression = Compression.GZIP
    archiveExtension = 'tar.gz'
}

gradle.taskGraph.whenReady {
    graph -> graph.allTasks.forEach {
        if (it.name.endsWith('DistZip')) {
            it.enabled = false
        }
    }
}